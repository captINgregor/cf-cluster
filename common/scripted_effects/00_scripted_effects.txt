#	Example:
#
#	example_effect = {
#		add_political_power = 66
#		add_popularity = {
#			ideology = fascism
#			popularity = 0.33
#		}
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

#####################################
### emergency_factory_conversion ####
#####################################

#This is going to give misleading and ugly tooltips. Making it nice will take effort. TODO_WTT_CD make nice or ignore and remove comment. Easiest solution is just making a custom tooltip that says "5 civilian factories will be converted to military factories" and ignore telling the player the states where it will happen.

replace_civ_with_arms_factories = {

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
}

#Country scope
ROOT_inherit_current_scope_wars_effect = {
	custom_effect_tooltip = ROOT_inherit_current_scope_wars_effect
	hidden_effect = {
		every_country = {
			limit = {
				has_defensive_war_with = PREV
			}
			ROOT = { declare_war_on = { target = PREV type = annex_everything } }
		}
		every_country = {
			limit = {
				has_offensive_war_with = PREV
			}
			declare_war_on = { target = ROOT type = annex_everything }
		}
	}
}

# Add AI strategies in case of Central European Alliance
GER_democratic_nations_ai_strategies = {
	# Reduce Contain against SOV
	add_ai_strategy = {
		type = contain
		id = "SOV"
		value = -800
	}
	add_ai_strategy = {
		type = contain
		id = "ITA"
		value = -800
	}
	# Poland
	add_ai_strategy = {
		type = protect
		id = "POL"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "POL"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "POL"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "POL"
		value = -200
	}
	# Finland
	add_ai_strategy = {
		type = protect
		id = "FIN"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "FIN"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "FIN"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "FIN"
		value = -200
	}
	# Estonia
	add_ai_strategy = {
		type = protect
		id = "EST"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "EST"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "EST"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "EST"
		value = -200
	}
	# Latvia
	add_ai_strategy = {
		type = protect
		id = "LAT"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "LAT"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "LAT"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "LAT"
		value = -200
	}
	# Lithuania
	add_ai_strategy = {
		type = protect
		id = "LIT"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "LIT"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "LIT"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "LIT"
		value = -200
	}
	# Romania
	add_ai_strategy = {
		type = protect
		id = "ROM"
		value = -200
	}
	add_ai_strategy = {
		type = ignore
		id = "ROM"
		value = 200
	}
	add_ai_strategy = {
		type = befriend
		id = "ROM"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "ROM"
		value = -200
	}
	# Norway
	add_ai_strategy = {
		type = ignore
		id = "NOR"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "NOR"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "NOR"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "NOR"
		value = -200
	}
	# Sweden
	add_ai_strategy = {
		type = ignore
		id = "SWE"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "SWE"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "SWE"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "SWE"
		value = -200
	}
	# Denmark
	add_ai_strategy = {
		type = ignore
		id = "DEN"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "DEN"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "DEN"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "DEN"
		value = -200
	}
	# Netherlands
	add_ai_strategy = {
		type = ignore
		id = "HOL"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "HOL"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "HOL"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "HOL"
		value = -200
	}
	# Belgium
	add_ai_strategy = {
		type = ignore
		id = "BEL"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "BEL"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "BEL"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "BEL"
		value = -200
	}
	# Luxemburg
	add_ai_strategy = {
		type = ignore
		id = "LUX"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "LUX"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "LUX"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "LUX"
		value = -200
	}
	# Austria
	add_ai_strategy = {
		type = ignore
		id = "AUS"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "AUS"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "AUS"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "AUS"
		value = -200
	}
	# Hungary
	add_ai_strategy = {
		type = ignore
		id = "HUN"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "HUN"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "HUN"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "HUN"
		value = -200
	}
	# Czechoslovakia
	add_ai_strategy = {
		type = ignore
		id = "CZE"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "CZE"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "CZE"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "CZE"
		value = -200
	}
	# Yugoslavia
	add_ai_strategy = {
		type = ignore
		id = "YUG"
		value = 200
	}
	add_ai_strategy = {
		type = protect
		id = "YUG"
		value = -200
	}
	add_ai_strategy = {
		type = befriend
		id = "YUG"
		value = -200
	}
	add_ai_strategy = {
		type = alliance
		id = "YUG"
		value = -200
	}
}

print_variable_log_effect = {
	print_variables = {
		file = variables_yug
		append = yes
	}
}

get_best_alliance_match_democratic_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = democratic
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = democratic
				not = { has_war_with = ROOT }
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < leader_score }
						set_temp_variable = { ROOT.best_leader = this }
						set_temp_variable = { ROOT.best_leader_score = leader_score }
					}
				}
			}
		}
	}
}

get_best_alliance_match_fascism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = fascism
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {

				is_faction_leader = yes
				is_major = yes
				has_government = fascism
				not = { has_war_with = ROOT }

				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { this.leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { this.leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < this.leader_score }
					}
					set_temp_variable = { ROOT.best_leader = this }
					set_temp_variable = { ROOT.best_leader_score = this.leader_score }
				}
			}
		}
	}
}

get_best_alliance_match_communism_effect = { #arguably a trigger, but it does stuff so we keep it in here. If this is your first time seeing this, welcome to my personal hell.
	if = {
		limit = {
			any_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = communism
				not = { has_war_with = ROOT }
				set_temp_variable = { ROOT.best_leader = this }
				set_temp_variable = { ROOT.best_leader_score = 0 }
			}
		}
	}
	if = {
		limit = {
			all_other_country = {
				is_faction_leader = yes
				is_major = yes
				has_government = communism
				not = { has_war_with = ROOT }
				set_temp_variable = { this.leader_score = num_of_factories }
				add_to_temp_variable = { this.leader_score = num_battalions }
				all_of_scopes = {
					array = allies
					add_to_temp_variable = { PREV.leader_score = num_of_factories }
					add_to_temp_variable = { PREV.leader_score = num_battalions }
				}
				if = {
					limit = {
						capital_scope = {
							is_on_continent = ROOT
						}
					}
					multiply_temp_variable = { leader_score = 2 }
				}
				if = {
					limit = {
						any_neighbor_country = { tag = ROOT }
					}
					multiply_temp_variable = { leader_score = 1.25 }
				}
				if = {
					limit = {
						check_variable = { ROOT.best_leader_score < leader_score }
						set_temp_variable = { ROOT.best_leader = this }
						set_temp_variable = { ROOT.best_leader_score = leader_score }
					}
				}
			}
		}
	}
}

remove_naval_treaty_effect = {
	if = {
		limit = {
			has_idea = MTG_naval_treaty_adherent
		}
		remove_ideas = MTG_naval_treaty_adherent
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_cheating
		}
		remove_ideas = MTG_naval_treaty_cheating
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_adherent_reduced
		}
		remove_ideas = MTG_naval_treaty_adherent_reduced
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_cheating_reduced
		}
		remove_ideas = MTG_naval_treaty_cheating_reduced
	}
	set_country_flag = MTG_naval_treaty_abandoned
}

civil_war_anti_exploiter_punitive_action = {
	# Anti-exploiter punitive brigades! BET YA DIDN'T SEE THAT COMING DID YA?!
	if = {
		limit = {
			has_army_size = {
			    size < 1
			}
		}
		division_template = {
			name = "Anti-Exploit Punitive Brigade"
			priority = 1
			division_names_group = ENG_MAR_01
			is_locked = yes
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }

		   	   	infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }

		   	   	infantry = { x = 2 y = 0 }
				artillery_brigade = { x = 2 y = 1 }
				artillery_brigade = { x = 2 y = 2 }
			}
			support = {
				engineer = { x = 0 y = 0 }
				recon = { x = 0 y = 1 }
				artillery = { x = 0 y = 2 }
			}
		}
		random_state = {
			limit = {
				is_capital = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
		random_state = {
			limit = {
				is_in_home_area = yes
				is_fully_controlled_by = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "division_template = \"Anti-Exploit Punitive Brigade\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
}

clear_sabotaged_resources_if_necesary = {
	if = {
		limit = {
			not = {
				has_dynamic_modifier = {
					modifier = sabotaged_resources
				}
			}
		}

		clear_variable = sabotaged_oil
		clear_variable = sabotaged_aluminium
		clear_variable = sabotaged_rubber
		clear_variable = sabotaged_tungsten
		clear_variable = sabotaged_steel
		clear_variable = sabotaged_chromium
	}
}

remove_from_allowed_party = {
	if = {
		limit = { has_government = democratic }
		set_temp_variable = { allowed_party_democratic = 0 }
	}
	else_if = {
		limit = { has_government = fascism }
		set_temp_variable = { allowed_party_fascism = 0 }
	}
	else_if = {
		limit = { has_government = communism }
		set_temp_variable = { allowed_party_communism = 0 }
	}
	else_if = {
		limit = { has_government = neutrality }
		set_temp_variable = { allowed_party_neutrality = 0 }
	}
}

#expectes a temp variable country_to_initiate which should contain original_tag to instantiate as a collabration government
instantiate_collaboration_government = {
	custom_effect_tooltip = compliance_80_effect_tooltip
	hidden_effect = {
		set_variable = { collaboration_formed@var:country_to_initiate = 1 }

		if = {
			# if country_to_initiate does not exist, simply release it as a puppet
			limit = {
				var:country_to_initiate = {
					exists = no
				}
			}
			var:country_to_initiate = { set_variable = { collaboration_formed_by = PREV } }
			release_autonomy = {
				target = country_to_initiate
				autonomy_state = autonomy_collaboration_government
				freedom_level = 0.5
				release_non_owned_controlled = yes
			}
		}
		else = {
			# if country_to_initiate exists, create a dynamic country as our new puppet

			create_dynamic_country = {
				original_tag = country_to_initiate

				set_variable = { collaboration_formed_by = PREV }
				set_temp_variable = { new_country = this }

				PREV = {
					every_controlled_state = {
						limit = { occupied_country_tag = country_to_initiate }

						var:new_country = {
							transfer_state = PREV
						}
					}

					puppet = new_country

					set_autonomy = {
						target = new_country
						autonomy_state = autonomy_collaboration_government
						freedom_level = 0.5
					}
				}
			}
		}
	}
}

abandon_colony_tag = {
	if = {
		limit = {
			is_subject = yes
		}
		if = {
			limit = {
				original_tag = CAN
			}
			if = {
				limit = { NOT = { has_dlc = "Together for Victory" } }
				set_cosmetic_tag = CAN_ALY
			}
			else = {
				set_cosmetic_tag = CAN_UK
			}
		}
		else_if = {
			limit = {
				original_tag = RAJ
			}
			set_cosmetic_tag = RAJ_UK
		}
		else_if = {
			limit = {
				original_tag = MAL
			}
			set_cosmetic_tag = MAL_UK
		}
		else_if = {
			limit = {
				original_tag = INS
			}
			set_cosmetic_tag = INS_HOL
		}
	}
	else = {
		if = {
			limit = {
				OR = {
					has_cosmetic_tag = united_polynesia
					has_cosmetic_tag = MAJ_UNIFIED
				}
			}
		}
		else = {
			drop_cosmetic_tag = yes
		}
	}
}

upgrade_economy_law = {
	if = {
		limit = {
			has_idea = civilian_economy
		}
		add_ideas = low_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		add_ideas = partial_economic_mobilisation
	}
	else_if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		add_ideas = war_economy
	}
	else_if = {
		limit = {
			has_idea = war_economy
		}
		add_ideas = tot_economic_mobilisation
	}
	else = {
		add_political_power = 150
	}
}
#TALL - adjusted to fit new upgrades introduced by Agency
gain_random_agency_upgrade = { #Gives a random agency upgrade or grants a free agency if one has not yet been established
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_internal_security
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_internal_security
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_civil_intel
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_civil_intel
							NOT = { has_done_agency_upgrade = upgrade_economy_civilian }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_military_intel
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_military_intel
							NOT = { has_done_agency_upgrade = upgrade_army_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_maritime_intel
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_maritime_intel
							NOT = { has_done_agency_upgrade = upgrade_naval_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_air_recon
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_air_recon
							NOT = { has_done_agency_upgrade = upgrade_airforce_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_humint
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_humint
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_sigint
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_sigint
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_masint
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_masint
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_opsec
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_opsec
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}

				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}

				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_decryption_boost }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_crypto_strength }
						}
					}
				}
			}
		}
	}
}
#TALL - end of chang
join_allies_effect = {
	if = {
		limit = {
			ENG = {
				is_faction_leader = yes
				has_government = democratic
				not = { has_war_with = ROOT }
			}
		}
		ENG = { country_event = generic.2 }
	}
	else = {
		get_best_alliance_match_democratic_effect = yes
		var:best_leader = {
			country_event = generic.2
		}
	}
}

#Should remove any and all fascist foreign influence, to be updated
remove_fascist_spirits_effect = {
	if = {
		limit = { has_idea = fascist_influence }
		remove_ideas = fascist_influence
	}
	if = {
		limit = { has_idea = american_influence_drift_fascism }
		remove_ideas = american_influence_drift_fascism
	}
	if = {
		limit = { has_idea = GER_align_hungary }
		remove_ideas = GER_align_hungary
	}
	if = {
		limit = { has_idea = GER_align_romania }
		remove_ideas = GER_align_romania
	}
}

#Should remove any and all communist foreign influence
remove_communist_spirits_effect = {
	if = {
		limit = { has_idea = american_influence_drift_communism }
		remove_ideas = american_influence_drift_communism
	}
	if = {
		limit = { has_idea = comintern_influence }
		remove_ideas = comintern_influence
	}
	if = {
		limit = { has_idea = pan_slavic_propaganda }
		remove_ideas = pan_slavic_propaganda
	}
	if = {
		limit = { has_idea = agitated_peasants }
		remove_ideas = agitated_peasants
	}
	if = {
		limit = { has_idea = armed_communist_militants }
		remove_ideas = armed_communist_militants
	}
	if = {
		limit = { has_idea = BALTIC_communist_propaganda }
		remove_ideas = BALTIC_communist_propaganda
	}
	if = { 
		limit = { has_idea = BALTIC_communist_militancy }
		remove_ideas = BALTIC_communist_militancy
	}
}

#Should remove any and all democratic foreign influence
remove_democratic_spirits_effect = {
	if = {
		limit = { has_idea = democratic_influence }
		remove_ideas = democratic_influence
	}
}

#Adds current ruling popularity to a new ideology - useful to represent ideological shifts within the same party
add_ruling_to_dem = {
	custom_effect_tooltip = add_ruling_to_dem_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				democratic_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}
add_ruling_to_fas = {
	custom_effect_tooltip = add_ruling_to_fas_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				fascism_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}
add_ruling_to_com = {
	custom_effect_tooltip = add_ruling_to_com_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = neutrality
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = neutrality_support_var
			}
			set_variable = {
				var = neutrality_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				communism_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}
add_ruling_to_neu = {
	custom_effect_tooltip = add_ruling_to_neu_tt
	hidden_effect = {
		if = {
			limit = {
				has_government = communism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = communism_support_var
			}
			set_variable = {
				var = communism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = fascism_support_var
			}
			set_variable = {
				var = fascism_support_var
				value = 0
			}
		}
		if = {
			limit = {
				has_government = democratic
			}
			set_variable = {
				var = neutrality_support_var
				value = party_popularity_100@neutrality
			}
			set_variable = {
				var = democratic_support_var
				value = party_popularity_100@democratic
			}
			set_variable = {
				var = communism_support_var
				value = party_popularity_100@communism
			}
			set_variable = {
				var = fascism_support_var
				value = party_popularity_100@fascism
			}
			add_to_variable = {
				neutrality_support_var = democratic_support_var
			}
			set_variable = {
				var = democratic_support_var
				value = 0
			}
		}
		set_popularities = {
			democratic = democratic_support_var
			neutrality = neutrality_support_var
			fascism = fascism_support_var
			communism = communism_support_var
		}
	}
}


cw_impose_embargo_diplomacy = {
	add_to_array = { array = ROOT.embargoed_countries value = FROM.id }
	ROOT = { add_opinion_modifier = { target = PREV modifier = cw_embargo_trade } }
	ROOT = { add_opinion_modifier = { target = PREV modifier = cw_embargo_relations_initiator } }
	add_opinion_modifier = { target = ROOT modifier = cw_embargo_relations_target }	
}
cw_remove_embargo_diplomacy = {
	ROOT = { remove_opinion_modifier = { target = PREV modifier = cw_embargo_trade } }
	ROOT = { remove_opinion_modifier = { target = PREV modifier = cw_embargo_relations_initiator } }
	remove_opinion_modifier = { target = ROOT modifier = cw_embargo_relations_target }			
	remove_from_array = { array = ROOT.embargoed_countries value = FROM.id }
}
cw_impose_embargo = {
	add_to_array = { array = PREV.embargoed_countries value = THIS.id }
	PREV = { add_opinion_modifier = { target = PREV modifier = cw_embargo_trade } }
	PREV = { add_opinion_modifier = { target = PREV modifier = cw_embargo_relations_initiator } }
	add_opinion_modifier = { target = PREV modifier = cw_embargo_relations_target }
}
cw_remove_embargo = {
	remove_from_array = { array = PREV.embargoed_countries value = THIS.id }
	PREV = { remove_opinion_modifier = { target = PREV modifier = cw_embargo_trade } }
	PREV = { remove_opinion_modifier = { target = PREV modifier = cw_embargo_relations_initiator } }
	remove_opinion_modifier = { target = PREV modifier = cw_embargo_relations_target }
}

pd_ai_will_take = {
	set_variable = { ROOT.pd_selected = 1 }
	add_state_to_list = yes
}

pd_ai_will_puppet = {
	set_variable = { ROOT.pd_selected = 2 }
	add_state_to_list = yes
}

pd_ai_will_demilitarize = {
	set_variable = { ROOT.pd_selected = 3 }
	add_state_to_list = yes
}

pd_ai_will_liberate = {
	set_variable = { ROOT.pd_selected = 4 }
	add_state_to_list = yes
}

####

pd_ai_prepare_peace_deal = {
	# root is the sender and this is receiver
	
	for_each_scope_loop = {
		array = ROOT.pd_state_list
		
		# TODO
	}
	
	# TODO
}

calculate_war_reparations_cost = {
	set_temp_variable = { action_cost = 0 }
	
	for_each_scope_loop  = {
		array = THIS.owned_states
		
		set_temp_variable = { pts = THIS.state_strategic_value }
		round_temp_variable = pts
		clamp_temp_variable = {
			var = pts
			min = 1
		}
		add_to_temp_variable = { action_cost = pts } 
	}
	
	divide_temp_variable = { action_cost = 10 }
	round_temp_variable = action_cost
	clamp_temp_variable = {
		var = action_cost
		min = 1
	}
	set_variable = { ROOT.pd_wr_cost = action_cost }
}

calculate_disarm_cost = {
	set_temp_variable = { action_cost = 0 }
	
	for_each_scope_loop  = {
		array = THIS.owned_states
		
		set_temp_variable = { pts = THIS.state_strategic_value }
		round_temp_variable = pts
		clamp_temp_variable = {
			var = pts
			min = 1
		}
		add_to_temp_variable = { action_cost = pts } 
	}
	
	divide_temp_variable = { action_cost = 5 }
	round_temp_variable = action_cost
	clamp_temp_variable = {
		var = action_cost
		min = 1
	}
	set_variable = { ROOT.pd_disarm_cost = action_cost }
}

reset_peace_deal_proposal = {
	if = {
		limit = {		
			ROOT = { NOT = { has_country_flag = pd_waiting_response } }
		}
		ROOT = { 
			set_variable = { pd_selected = 1 }
			set_variable = { pd_total_cost = 0 }
			clr_country_flag = pd_disarm
			clr_country_flag = pd_war_reparations
			clear_array = pd_take_array
			clear_array = pd_puppet_array
			clear_array = pd_demilitarize_array
			clear_array = pd_liberate_array
			clear_array = pd_state_list
		}
		if = {
			limit = {
				ROOT = { has_country_flag = pd_root_gives }
			} 
			ROOT = {
				calculate_war_reparations_cost = yes
				calculate_disarm_cost = yes
			}
			every_country = {
				limit = {
					has_war_with = PREV
					OR = {
						tag = ROOT
						is_subject_of = ROOT
						AND = {
							ROOT = { is_faction_leader = yes }
							is_in_faction_with = ROOT
						}
					}
				}
				for_each_loop = {
					array = owned_states
					if = {
						limit = {
							OR = {
								controls_state = v
								ROOT = { controls_state = v }
								any_country = {
									is_in_faction_with = THIS
									has_war_with = ROOT
									controls_state = v
								}
							}
						}
						ROOT = { add_to_array = { pd_state_list = v } }
					}
				}
			}
		}
		else = {
			calculate_war_reparations_cost = yes
			calculate_disarm_cost = yes
			every_country = {
				limit = {
					has_war_with = ROOT
					OR = {
						tag = PREV
						is_subject_of = PREV
						AND = {
							PREV = { is_faction_leader = yes }
							is_in_faction_with = PREV
						}
					}
				}
				for_each_loop = {
					array = owned_states
					if = {
						limit = {
							OR = {
								controls_state = v
								ROOT = { controls_state = v }
								any_country = {
									is_in_faction_with = ROOT
									has_war_with = PREV
									controls_state = v
								}
							}
						}
						ROOT = { add_to_array = { pd_state_list = v } }
					}
				}
			}
		}
	}
}

add_state_to_list = {
	if = {
		limit = {
			check_variable = { ROOT.pd_selected = 1 }
		}
		ROOT = { 
			add_to_array = { pd_take_array = PREV } 
		}
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 2 }
		}
		ROOT = { add_to_array = { pd_puppet_array = PREV } }
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 3 }
		}
		ROOT = { add_to_array = { pd_demilitarize_array = PREV } }
		
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 4 }
		}
		ROOT = { add_to_array = { pd_liberate_array = PREV } }
	}

	#if = {
	#	limit = { 
	#		pd_calculate_province_cost = yes
	#		ROOT = { has_country_flag = pd_root_gives } 
	#	}
	#	subtract_from_variable = { ROOT.pd_total_cost = pts } 
	#}
	#else = {
	#	add_to_variable = { ROOT.pd_total_cost = pts } 
	#}
}

remove_state_from_list = {
	if = {
		limit = {
			check_variable = { ROOT.pd_selected = 1 }
			ROOT = { 
				is_in_array = {
					array = pd_take_array
					value = PREV
				}
			}
		}
		ROOT = { remove_from_array  = { pd_take_array = PREV } }
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 2 }
			ROOT = { 
				is_in_array = {
					array = pd_puppet_array
					value = PREV
				}
			}
		}
		ROOT = { remove_from_array  = { pd_puppet_array = PREV } }
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 3 }
			ROOT = { 
				is_in_array = {
					array = pd_demilitarize_array
					value = PREV
				}
			}
		}
		ROOT = { remove_from_array  = { pd_demilitarize_array = PREV } }
	}
	else_if = {
		limit = {
			check_variable = { ROOT.pd_selected = 4 }
			ROOT = { 
				is_in_array = {
					array = pd_liberate_array
					value = PREV
				}
			}
		}
		ROOT = { remove_from_array  = { pd_liberate_array = PREV } }
	}
	
	#if = {
	#	limit = { 
	#		pd_calculate_province_cost = yes
	#		ROOT = { has_country_flag = pd_root_gives } 
	#	}
	#	add_to_variable = { ROOT.pd_total_cost = pts } 
	#}
	#else = {
	#	subtract_from_variable = { ROOT.pd_total_cost = pts } 
	#} 
}

clear_vp = {
	set_temp_variable = { root_this_pts = ROOT.vp@THIS }
	set_temp_variable = { this_root_pts = THIS.vp@ROOT }
	# Substract from faction leader in case of seperate peace deal
	if = {
		limit = {
			ROOT = { 
				has_country_flag = pd_root_gives 
				is_in_faction = yes
				NOT = { is_faction_leader = yes }
			}
		}
		random_country = {
			limit = {
				is_in_faction_with = ROOT
				is_faction_leader = yes
			}
			divide_temp_variable = { this_root_pts = 2 }
			round_temp_variable = this_root_pts
			subtract_from_variable = { PREV.vp@THIS = this_root_pts }
		}
	}
	else_if = {
		limit = {
			is_in_faction = yes
			NOT = { is_faction_leader = yes }
		}
		random_country = {
			limit = {
				is_in_faction_with = PREV
				is_faction_leader = yes
			}
			divide_temp_variable = { root_this_pts = 2 }
			round_temp_variable = root_this_pts
			subtract_from_variable = { ROOT.vp@THIS = root_this_pts }
		}
	}
	# Clear vps
	clear_variable = ROOT.vp@THIS
	clear_variable = THIS.vp@ROOT
}

execute_peace_deal = {
	# Set up scopes
	if = {
		limit = {
			ROOT = { has_country_flag = pd_root_gives }
		}
		set_temp_variable = { taker = THIS }
		set_temp_variable = { giver = ROOT }
	}
	else = {
		set_temp_variable = { taker = ROOT }
		set_temp_variable = { giver = THIS }
	}
	# White peace
	var:giver = {
		if = {
			limit = {
				var:taker = { is_faction_leader = no }
			}
			white_peace = var:taker
			
			# Can't use vars in set_truce target
			var:taker = { 
				var:giver = {
					set_truce = {
						target = PREV
						days = 720
					}
				}
			}
		}
		else = {
			every_enemy_country = {
				limit = {
					is_in_faction_with = var:taker
				}
				white_peace = PREV
				set_truce = {
					target = PREV
					days = 720
				}
			}
		}
		if = {
			limit = {
				is_faction_leader = no
			}
			leave_faction = yes
			add_timed_idea = {
				idea = conditional_surrender
				days = 720
			}
		}
		else = {
			every_other_country = {
				limit = {
					is_in_faction_with = var:giver
				}
				white_peace = var:taker
			}
		}
	}
	# Deal take an effect
	ROOT = { 
		# Take
		for_each_scope_loop = {
			array = pd_take_array
			
			var:taker = { transfer_state = PREV }
		}
		# Demilitarize
		for_each_scope_loop = {
			array = pd_demilitarize_array
			
			set_demilitarized_zone = yes
		}
		# Liberate
		for_each_scope_loop = {
			array = pd_liberate_array
			
			set_temp_variable = { victim = THIS.owner }
			set_temp_variable = { s = THIS }
			
			if = {
				limit = {
					any_country = {
						NOT = {	original_tag = var:victim }
						NOT = { tag = var:taker }
						var:s = {
							is_core_of = PREV
						}
					}
				}
				random_country = {
					limit = {
						NOT = {	original_tag = var:victim }
						var:s = {
							is_core_of = PREV
						}
					}
					transfer_state = var:s
				}
			}
			else = {
				random_scope_in_array = {
					array = var:global.countries
					limit = {
						exists = no
						var:s = {
							is_core_of = PREV
						}
					}
					transfer_state = var:s
					if = {
						limit = {
							var:taker = {
								has_rule = can_puppet
							}
						}
						var:taker = {
							puppet = PREV
						}
					}
					if = {
						limit = {
							var:taker = {
								has_elections = yes
							}
						}
						set_politics = {
							ruling_party = var:var:taker.current_party_ideology_group
							elections_allowed = yes
						}
					}
					else = {
						set_politics = {
							ruling_party = var:var:taker.current_party_ideology_group
							elections_allowed = no
						}
					}
				}
			}
		}
		# Full puppet
		every_country = {
			limit = {
				all_of = {
					array = owned_states
					is_in_array = {
						array = ROOT.pd_puppet_array
						value = v
					}
				}
			}
			for_each_loop = {
				array = owned_states
				remove_from_array = { ROOT.pd_puppet_array = v }
			}
			var:taker = {
				puppet = PREV
			}
		}
		# Puppet
		for_each_scope_loop = {
			array = pd_puppet_array
			
			set_temp_variable = { victim = THIS.owner }
			set_temp_variable = { s = THIS }
			
			if = {
                limit = {
                    any_country = {
                        original_tag = var:victim
                        is_puppet_of = var:taker
                    }
                }
                random_country = {
                    limit = {
                        original_tag = var:victim
                        is_puppet_of = var:taker
                    }
                    transfer_state = var:s
                }
            }
            else = {
                create_dynamic_country = {
                    original_tag = THIS.owner
                    if = {
                        limit = {
                            var:taker = {
                                has_elections = yes
                            }
                        }
                        set_politics = {
                            ruling_party = var:var:taker.current_party_ideology_group
                            elections_allowed = yes
                        }
                    }
                    else = {
                        set_politics = {
                            ruling_party = var:var:taker.current_party_ideology_group
                            elections_allowed = no
                        }
                    }
                    set_political_party = {
                        ideology = var:var:taker.current_party_ideology_group
                        popularity = 60
                    }
                    set_cosmetic_tag = THIS.owner
                    reserve_dynamic_country = yes
                    var:taker = { puppet = PREV }
					transfer_state = PREV
                }
            }
		}
	}
	# War reparations
	if = {
		limit = { 
			ROOT = { has_country_flag = pd_war_reparations }
		}
		
		var:giver = {
			add_to_variable = { wr_payments = 1 }
			activate_targeted_decision = {
				target = var:taker
				decision = pd_pay_war_reparations
			}
		}
	}
	# Disarm nation
	if = {
		limit = { 
			ROOT = { has_country_flag = pd_disarm }
		}
		var:giver = {
			add_timed_idea = {
				idea = peace_disarmed_nation
				days = 720
			}
			add_timed_idea = {
				idea = peace_civilian_economy
				days = 720
			}
		}
	}
}

rename_faction_effect = {
	if = {
        limit = {
            NOT = {
                check_variable = { current_char = 0 }
                check_variable = { chars^0 = 0 }
            }
        }
		meta_effect = {
			text = {
				set_faction_name = "[CHAR_1][CHAR_2][CHAR_3][CHAR_4][CHAR_5][CHAR_6][CHAR_7][CHAR_8][CHAR_9][CHAR_10][CHAR_11][CHAR_12][CHAR_13][CHAR_14][CHAR_15][CHAR_16][CHAR_17][CHAR_18][CHAR_19][CHAR_20][CHAR_21][CHAR_22][CHAR_23][CHAR_24][CHAR_25][CHAR_26][CHAR_27][CHAR_28][CHAR_29][CHAR_30][CHAR_31][CHAR_32]"
			}
			CHAR_1 = "[This.GET_CHAR_1]"
			CHAR_2 = "[This.GET_CHAR_2]"
			CHAR_3 = "[This.GET_CHAR_3]"
			CHAR_4 = "[This.GET_CHAR_4]"
			CHAR_5 = "[This.GET_CHAR_5]"
			CHAR_6 = "[This.GET_CHAR_6]"
			CHAR_7 = "[This.GET_CHAR_7]"
			CHAR_8 = "[This.GET_CHAR_8]"
			CHAR_9 = "[This.GET_CHAR_9]"
			CHAR_10 = "[This.GET_CHAR_10]"
			CHAR_11 = "[This.GET_CHAR_11]"
			CHAR_12 = "[This.GET_CHAR_12]"
			CHAR_13 = "[This.GET_CHAR_13]"
			CHAR_14 = "[This.GET_CHAR_14]"
			CHAR_15 = "[This.GET_CHAR_15]"
			CHAR_16 = "[This.GET_CHAR_16]"
			CHAR_17 = "[This.GET_CHAR_17]"
			CHAR_18 = "[This.GET_CHAR_18]"
			CHAR_19 = "[This.GET_CHAR_19]"
			CHAR_20 = "[This.GET_CHAR_20]"
			CHAR_21 = "[This.GET_CHAR_21]"
			CHAR_22 = "[This.GET_CHAR_22]"
			CHAR_23 = "[This.GET_CHAR_23]"
			CHAR_24 = "[This.GET_CHAR_24]"
			CHAR_25 = "[This.GET_CHAR_25]"
			CHAR_26 = "[This.GET_CHAR_26]"
			CHAR_27 = "[This.GET_CHAR_27]"
			CHAR_28 = "[This.GET_CHAR_28]"
			CHAR_29 = "[This.GET_CHAR_29]"
			CHAR_30 = "[This.GET_CHAR_30]"
			CHAR_31 = "[This.GET_CHAR_31]"
			CHAR_32 = "[This.GET_CHAR_32]"
		}
	}
}

keypress_init = {
    if = {
        limit = { NOT = { has_variable = current_char } }
        set_variable = { current_char = -1 }
        resize_array = {
            array = chars
            size = 32
        }
    }
    add_to_variable = { current_char = 1 }
}

get_keypress_backspace = {
    set_variable = { chars^current_char = 0 }
    subtract_from_variable = { current_char = 1 }
    clamp_variable = {
        var = current_char
        min = 0
        max = 32
    }
}

get_keypress_space = {
	keypress_init = yes
	set_variable = { chars^current_char = 32 }
}
get_keypress_exclamation_mark = {
	keypress_init = yes
	set_variable = { chars^current_char = 33 }
}
get_keypress_lbracket = {
	keypress_init = yes
	set_variable = { chars^current_char = 40 }
}
get_keypress_rbracket = {
	keypress_init = yes
	set_variable = { chars^current_char = 41 }
}
get_keypress_asterix = {
	keypress_init = yes
	set_variable = { chars^current_char = 42 }
}
get_keypress_plus = {
	keypress_init = yes
	set_variable = { chars^current_char = 43 }
}
get_keypress_comma = {
	keypress_init = yes
	set_variable = { chars^current_char = 44 }
}
get_keypress_hyphen = {
	keypress_init = yes
	set_variable = { chars^current_char = 45 }
}
get_keypress_dot = {
	keypress_init = yes
	set_variable = { chars^current_char = 46 }
}
get_keypress_slash = {
	keypress_init = yes
	set_variable = { chars^current_char = 47 }
}
get_keypress_colon = {
	keypress_init = yes
	set_variable = { chars^current_char = 58 }
}
get_keypress_semicolon = {
	keypress_init = yes
	set_variable = { chars^current_char = 59 }
}
get_keypress_lesser_than = {
	keypress_init = yes
	set_variable = { chars^current_char = 60 }
}
get_keypress_equal_to = {
	keypress_init = yes
	set_variable = { chars^current_char = 61 }
}
get_keypress_greater_than = {
	keypress_init = yes
	set_variable = { chars^current_char = 62 }
}
get_keypress_question_mark = {
	keypress_init = yes
	set_variable = { chars^current_char = 63 }
}
get_keypress_at = {
	keypress_init = yes
	set_variable = { chars^current_char = 64 }
}
get_keypress_0 = {
	keypress_init = yes
	set_variable = { chars^current_char = 48 }
}
get_keypress_1 = {
	keypress_init = yes
	set_variable = { chars^current_char = 49 }
}
get_keypress_2 = {
	keypress_init = yes
	set_variable = { chars^current_char = 50 }
}
get_keypress_3 = {
	keypress_init = yes
	set_variable = { chars^current_char = 51 }
}
get_keypress_4 = {
	keypress_init = yes
	set_variable = { chars^current_char = 52 }
}
get_keypress_5 = {
	keypress_init = yes
	set_variable = { chars^current_char = 53 }
}
get_keypress_6 = {
	keypress_init = yes
	set_variable = { chars^current_char = 54 }
}
get_keypress_7 = {
	keypress_init = yes
	set_variable = { chars^current_char = 55 }
}
get_keypress_8 = {
	keypress_init = yes
	set_variable = { chars^current_char = 56 }
}
get_keypress_9 = {
	keypress_init = yes
	set_variable = { chars^current_char = 57 }
}
get_keypress_shift_A = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_A = yes
	}
	else = {
		set_variable = { chars^current_char = 65 }
	}
}
get_keypress_shift_B = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_B = yes
	}
	else = {
		set_variable = { chars^current_char = 66 }
	}
}
get_keypress_shift_C = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_C = yes
	}
	else = {
		set_variable = { chars^current_char = 67 }
	}
}
get_keypress_shift_D = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_D = yes
	}
	else = {
		set_variable = { chars^current_char = 68 }
	}
}
get_keypress_shift_E = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_E = yes
	}
	else = {
		set_variable = { chars^current_char = 69 }
	}
}
get_keypress_shift_F = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_F = yes
	}
	else = {
		set_variable = { chars^current_char = 70 }
	}
}
get_keypress_shift_G = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_G = yes
	}
	else = {
		set_variable = { chars^current_char = 71 }
	}
}
get_keypress_shift_H = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_H = yes
	}
	else = {
		set_variable = { chars^current_char = 72 }
	}
}
get_keypress_shift_I = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_I = yes
	}
	else = {
		set_variable = { chars^current_char = 73 }
	}
}
get_keypress_shift_J = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_J = yes
	}
	else = {
		set_variable = { chars^current_char = 74 }
	}
}
get_keypress_shift_K = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_K = yes
	}
	else = {
		set_variable = { chars^current_char = 75 }
	}
}
get_keypress_shift_L = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_L = yes
	}
	else = {
		set_variable = { chars^current_char = 76 }
	}
}
get_keypress_shift_M = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_M = yes
	}
	else = {
		set_variable = { chars^current_char = 77 }
	}
}
get_keypress_shift_N = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_N = yes
	}
	else = {
		set_variable = { chars^current_char = 78 }
	}
}
get_keypress_shift_O = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_O = yes
	}
	else = {
		set_variable = { chars^current_char = 79 }
	}
}
get_keypress_shift_P = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_P = yes
	}
	else = {
		set_variable = { chars^current_char = 80 }
	}
}
get_keypress_shift_Q = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_Q = yes
	}
	else = {
		set_variable = { chars^current_char = 81 }
	}
}
get_keypress_shift_R = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_R = yes
	}
	else = {
		set_variable = { chars^current_char = 82 }
	}
}
get_keypress_shift_S = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_S = yes
	}
	else = {
		set_variable = { chars^current_char = 83 }
	}
}
get_keypress_shift_T = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_T = yes
	}
	else = {
		set_variable = { chars^current_char = 84 }
	}
}
get_keypress_shift_U = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_U = yes
	}
	else = {
		set_variable = { chars^current_char = 85 }
	}
}
get_keypress_shift_V = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_V = yes
	}
	else = {
		set_variable = { chars^current_char = 86 }
	}
}
get_keypress_shift_W = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_W = yes
	}
	else = {
		set_variable = { chars^current_char = 87 }
	}
}
get_keypress_shift_X = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_X = yes
	}
	else = {
		set_variable = { chars^current_char = 88 }
	}
}
get_keypress_shift_Y = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_Y = yes
	}
	else = {
		set_variable = { chars^current_char = 89 }
	}
}
get_keypress_shift_Z = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_shift_Z = yes
	}
	else = {
		set_variable = { chars^current_char = 90 }
	}
}
get_keypress_a = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_a = yes
	}
	else = {
		set_variable = { chars^current_char = 97 }
	}
}
get_keypress_b = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_b = yes
	}
	else = {
		set_variable = { chars^current_char = 98 }
	}
}
get_keypress_c = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_c = yes
	}
	else = {
		set_variable = { chars^current_char = 99 }
	}
}
get_keypress_d = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_d = yes
	}
	else = {
		set_variable = { chars^current_char = 100 }
	}
}
get_keypress_e = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_e = yes
	}
	else = {
		set_variable = { chars^current_char = 101 }
	}
}
get_keypress_f = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_f = yes
	}
	else = {
		set_variable = { chars^current_char = 102 }
	}
}
get_keypress_g = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_g = yes
	}
	else = {
		set_variable = { chars^current_char = 103 }
	}
}
get_keypress_h = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_h = yes
	}
	else = {
		set_variable = { chars^current_char = 104 }
	}
}
get_keypress_i = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_i = yes
	}
	else = {
		set_variable = { chars^current_char = 105 }
	}
}
get_keypress_j = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_j = yes
	}
	else = {
		set_variable = { chars^current_char = 106 }
	}
}
get_keypress_k = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_k = yes
	}
	else = {
		set_variable = { chars^current_char = 107 }
	}
}
get_keypress_l = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_l = yes
	}
	else = {
		set_variable = { chars^current_char = 108 }
	}
}
get_keypress_m = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_m = yes
	}
	else = {
		set_variable = { chars^current_char = 109 }
	}
}
get_keypress_n = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_n = yes
	}
	else = {
		set_variable = { chars^current_char = 110 }
	}
}
get_keypress_o = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_o = yes
	}
	else = {
		set_variable = { chars^current_char = 111 }
	}
}
get_keypress_p = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_p = yes
	}
	else = {
		set_variable = { chars^current_char = 112 }
	}
}
get_keypress_q = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_q = yes
	}
	else = {
		set_variable = { chars^current_char = 113 }
	}
}
get_keypress_r = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_r = yes
	}
	else = {
		set_variable = { chars^current_char = 114 }
	}
}
get_keypress_s = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_s = yes
	}
	else = {
		set_variable = { chars^current_char = 115 }
	}
}
get_keypress_t = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_t = yes
	}
	else = {
		set_variable = { chars^current_char = 116 }
	}
}
get_keypress_u = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_u = yes
	}
	else = {
		set_variable = { chars^current_char = 117 }
	}
}
get_keypress_v = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_v = yes
	}
	else = {
		set_variable = { chars^current_char = 118 }
	}
}
get_keypress_w = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_w = yes
	}
	else = {
		set_variable = { chars^current_char = 119 }
	}
}
get_keypress_x = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_x = yes
	}
	else = {
		set_variable = { chars^current_char = 120 }
	}
}
get_keypress_y = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_y = yes
	}
	else = {
		set_variable = { chars^current_char = 121 }
	}
}
get_keypress_z = {
	keypress_init = yes
	if = {
		limit = { check_variable = { ROOT.rename_language = 2 } }
		get_ru_keypress_z = yes
	}
	else = {
		set_variable = { chars^current_char = 122 }
	}
}

#RU
get_ru_keypress_shift_A = {
	
	set_variable = { chars^current_char = 123 }
}
get_ru_keypress_shift_B = {
	
	set_variable = { chars^current_char = 124 }
}
get_ru_keypress_shift_C = {
	
	set_variable = { chars^current_char = 125 }
}
get_ru_keypress_shift_D = {
	
	set_variable = { chars^current_char = 126 }
}
get_ru_keypress_shift_E = {
	
	set_variable = { chars^current_char = 127 }
}
get_ru_keypress_shift_F = {
	
	set_variable = { chars^current_char = 128 }
}
get_ru_keypress_shift_G = {
	
	set_variable = { chars^current_char = 129 }
}
get_ru_keypress_shift_H = {
	
	set_variable = { chars^current_char = 130 }
}
get_ru_keypress_shift_I = {
	
	set_variable = { chars^current_char = 131 }
}
get_ru_keypress_shift_J = {
	
	set_variable = { chars^current_char = 132 }
}
get_ru_keypress_shift_K = {
	
	set_variable = { chars^current_char = 133 }
}
get_ru_keypress_shift_L = {
	
	set_variable = { chars^current_char = 134 }
}
get_ru_keypress_shift_M = {
	
	set_variable = { chars^current_char = 135 }
}
get_ru_keypress_shift_N = {
	
	set_variable = { chars^current_char = 136 }
}
get_ru_keypress_shift_O = {
	
	set_variable = { chars^current_char = 137 }
}
get_ru_keypress_shift_P = {
	
	set_variable = { chars^current_char = 138 }
}
get_ru_keypress_shift_Q = {
	
	set_variable = { chars^current_char = 139 }
}
get_ru_keypress_shift_R = {
	
	set_variable = { chars^current_char = 140 }
}
get_ru_keypress_shift_S = {
	
	set_variable = { chars^current_char = 141 }
}
get_ru_keypress_shift_T = {
	
	set_variable = { chars^current_char = 142 }
}
get_ru_keypress_shift_U = {
	
	set_variable = { chars^current_char = 143 }
}
get_ru_keypress_shift_V = {
	
	set_variable = { chars^current_char = 144 }
}
get_ru_keypress_shift_W = {
	
	set_variable = { chars^current_char = 145 }
}
get_ru_keypress_shift_X = {
	
	set_variable = { chars^current_char = 146 }
}
get_ru_keypress_shift_Y = {
	
	set_variable = { chars^current_char = 147 }
}
get_ru_keypress_shift_Z = {
	
	set_variable = { chars^current_char = 148 }
}
get_ru_keypress_a = {
	
	set_variable = { chars^current_char = 149 }
}
get_ru_keypress_b = {
	
	set_variable = { chars^current_char = 150 }
}
get_ru_keypress_c = {
	
	set_variable = { chars^current_char = 151 }
}
get_ru_keypress_d = {
	
	set_variable = { chars^current_char = 152 }
}
get_ru_keypress_e = {
	
	set_variable = { chars^current_char = 153 }
}
get_ru_keypress_f = {
	
	set_variable = { chars^current_char = 154 }
}
get_ru_keypress_g = {
	
	set_variable = { chars^current_char = 155 }
}
get_ru_keypress_h = {
	
	set_variable = { chars^current_char = 156 }
}
get_ru_keypress_i = {
	
	set_variable = { chars^current_char = 157 }
}
get_ru_keypress_j = {
	
	set_variable = { chars^current_char = 158 }
}
get_ru_keypress_k = {
	
	set_variable = { chars^current_char = 159 }
}
get_ru_keypress_l = {
	
	set_variable = { chars^current_char = 160 }
}
get_ru_keypress_m = {
	
	set_variable = { chars^current_char = 161 }
}
get_ru_keypress_n = {
	
	set_variable = { chars^current_char = 162 }
}
get_ru_keypress_o = {
	
	set_variable = { chars^current_char = 163 }
}
get_ru_keypress_p = {
	
	set_variable = { chars^current_char = 164 }
}
get_ru_keypress_q = {
	
	set_variable = { chars^current_char = 165 }
}
get_ru_keypress_r = {
	
	set_variable = { chars^current_char = 166 }
}
get_ru_keypress_s = {
	
	set_variable = { chars^current_char = 167 }
}
get_ru_keypress_t = {
	
	set_variable = { chars^current_char = 168 }
}
get_ru_keypress_u = {
	
	set_variable = { chars^current_char = 169 }
}
get_ru_keypress_v = {
	
	set_variable = { chars^current_char = 170 }
}
get_ru_keypress_w = {
	
	set_variable = { chars^current_char = 171 }
}
get_ru_keypress_x = {
	
	set_variable = { chars^current_char = 172 }
}
get_ru_keypress_y = {
	
	set_variable = { chars^current_char = 173 }
}
get_ru_keypress_z = {
	
	set_variable = { chars^current_char = 174 }
}


#extra_russian_word
get_ru_keypress_shift_ru_X = {
	keypress_init = yes
	set_variable = { chars^current_char = 175 }
}
get_ru_keypress_shift_TV_ZNAK = {
	keypress_init = yes
	set_variable = { chars^current_char = 176 }
}
get_ru_keypress_shift_JJ = {
	keypress_init = yes
	set_variable = { chars^current_char = 177 }
}
get_ru_keypress_shift_IE = {
	keypress_init = yes
	set_variable = { chars^current_char = 178 }
}
get_ru_keypress_shift_ru_B = {
	keypress_init = yes
	set_variable = { chars^current_char = 179 }
}
get_ru_keypress_shift_YU = {
	keypress_init = yes
	set_variable = { chars^current_char = 180 }
}

#little
get_ru_keypress_ru_x = {
	keypress_init = yes
	set_variable = { chars^current_char = 181 }
}
get_ru_keypress_tv_znak = {
	keypress_init = yes
	set_variable = { chars^current_char = 182 }
}
get_ru_keypress_jj = {
	keypress_init = yes
	set_variable = { chars^current_char = 183 }
}
get_ru_keypress_ie = {
	keypress_init = yes
	set_variable = { chars^current_char = 184 }
}
get_ru_keypress_ru_b = {
	keypress_init = yes
	set_variable = { chars^current_char = 185 }
}
get_ru_keypress_yu = {
	keypress_init = yes
	set_variable = { chars^current_char = 186 }
}

get_pl_keypress_shift_an = {
	keypress_init = yes
	set_variable = { chars^current_char = 187 }
}
get_pl_keypress_shift_ci = {
	keypress_init = yes
	set_variable = { chars^current_char = 188 }
}
get_pl_keypress_shift_ly = {
	keypress_init = yes
	set_variable = { chars^current_char = 189 }
}
get_pl_keypress_shift_ni = {
	keypress_init = yes
	set_variable = { chars^current_char = 190 }
}
get_pl_keypress_shift_ou = {
	keypress_init = yes
	set_variable = { chars^current_char = 191 }
}
get_pl_keypress_shift_si = {
	keypress_init = yes
	set_variable = { chars^current_char = 192 }
}
get_pl_keypress_shift_zi = {
	keypress_init = yes
	set_variable = { chars^current_char = 193 }
}
get_pl_keypress_shift_zz = {
	keypress_init = yes
	set_variable = { chars^current_char = 194 }
}
get_pl_keypress_an = {
	keypress_init = yes
	set_variable = { chars^current_char = 195 }
}
get_pl_keypress_ci = {
	keypress_init = yes
	set_variable = { chars^current_char = 196 }
}
get_pl_keypress_ly = {
	keypress_init = yes
	set_variable = { chars^current_char = 197 }
}
get_pl_keypress_ni = {
	keypress_init = yes
	set_variable = { chars^current_char = 198 }
}
get_pl_keypress_ou = {
	keypress_init = yes
	set_variable = { chars^current_char = 199 }
}
get_pl_keypress_si = {
	keypress_init = yes
	set_variable = { chars^current_char = 200 }
}
get_pl_keypress_zi = {
	keypress_init = yes
	set_variable = { chars^current_char = 201 }
}
get_pl_keypress_zz = {
	keypress_init = yes
	set_variable = { chars^current_char = 202 }
}
get_pl_keypress_shift_en = {
	keypress_init = yes
	set_variable = { chars^current_char = 203 }
}
get_pl_keypress_en = {
	keypress_init = yes
	set_variable = { chars^current_char = 204 }
}

get_de_keypress_shift_ae = {
	keypress_init = yes
	set_variable = { chars^current_char = 205 }
}
get_de_keypress_shift_oe = {
	keypress_init = yes
	set_variable = { chars^current_char = 206 }
}
get_de_keypress_shift_ue = {
	keypress_init = yes
	set_variable = { chars^current_char = 207 }
}
get_de_keypress_shift_ss = {
	keypress_init = yes
	set_variable = { chars^current_char = 208 }
}
get_de_keypress_ae = {
	keypress_init = yes
	set_variable = { chars^current_char = 209 }
}
get_de_keypress_oe = {
	keypress_init = yes
	set_variable = { chars^current_char = 210 }
}
get_de_keypress_ue = {
	keypress_init = yes
	set_variable = { chars^current_char = 211 }
}
get_de_keypress_ss = {
	keypress_init = yes
	set_variable = { chars^current_char = 212 }
}


update_radiation_effects = {

	set_temp_variable = {
		var = population_grown_radiation_effect_temp
		value = radiation_var
	}
	multiply_temp_variable = {
		var = population_grown_radiation_effect_temp
		value = -4.9
	}
	set_variable = {
		var = population_grown_radiation_effect
		value = population_grown_radiation_effect_temp
	}
	set_temp_variable = {
		var = army_speed_radiation_effect_temp
		value = radiation_var
	}
	multiply_temp_variable = {
		var = army_speed_radiation_effect_temp
		value = -0.075
	}
	set_variable = {
		var = army_speed_radiation_effect
		value = army_speed_radiation_effect_temp
	}
	set_temp_variable = {
		var = constraction_speed_radiation_effect_temp
		value = radiation_var
	}
	multiply_temp_variable = {
		var = constraction_speed_radiation_effect_temp
		value = -0.3
	}
	set_variable = {
		var = constraction_speed_radiation_effect
		value = constraction_speed_radiation_effect_temp
	}
	set_temp_variable = {
		var = repair_speed_radiation_effect_temp
		value = radiation_var
	}
	multiply_temp_variable = {
		var = repair_speed_radiation_effect_temp
		value = -0.4
	}
	set_variable = {
		var = repair_speed_radiation_effect
		value = repair_speed_radiation_effect_temp
	}
}


add_operation_token_for_FROM = {
	if = {
		limit = {
			NOT = { FROM = { is_in_array = { array = Root.operation_token_array } } }
		}
		add_to_array = { operation_token_array = From.id }
	}
	meta_effect = {
		text = {
			add_operation_token = {
				tag = FROM
				token = [TOKEN]
			}
			if = {
				limit = {
					NOT = { has_country_flag = operation/[TOKEN]@FROM }
				}
				set_country_flag = operation_token/[TOKEN]@FROM
			}
			else = {
				modify_country_flag = {
					flag = operation/[TOKEN]@FROM
					value = 1 
				}
			}
		}
		TOKEN = "[?temp.GetTokenKey]"
	}
}

#on_daily_USA = {
#	# you can specify an on daily action for a specific country
#}

